// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors

import 'dart:convert';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'dart:typed_data';
import 'dart:typed_data';

import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part 'bridge.g.freezed.dart';

abstract class FlutterWebrtcNative {
  /// Returns a list of all available media input and output devices, such as
  /// microphones, cameras, headsets, and so forth.
  Future<List<MediaDeviceInfo>> enumerateDevices({dynamic hint});

  /// Creates a new [`PeerConnection`] and returns its ID.
  Stream<PeerConnectionEvent> createPeerConnection(
      {required RtcConfiguration configuration, dynamic hint});

  /// Initiates the creation of an SDP offer for the purpose of starting a new
  /// WebRTC connection to a remote peer.
  Future<RtcSessionDescription> createOffer(
      {required int peerId,
      required bool voiceActivityDetection,
      required bool iceRestart,
      required bool useRtpMux,
      dynamic hint});

  /// Creates an SDP answer to an offer received from a remote peer during an
  /// offer/answer negotiation of a WebRTC connection.
  Future<RtcSessionDescription> createAnswer(
      {required int peerId,
      required bool voiceActivityDetection,
      required bool iceRestart,
      required bool useRtpMux,
      dynamic hint});

  /// Changes the local description associated with the connection.
  Future<void> setLocalDescription(
      {required int peerId,
      required SdpType kind,
      required String sdp,
      dynamic hint});

  /// Sets the specified session description as the remote peer's current offer or
  /// answer.
  Future<void> setRemoteDescription(
      {required int peerId,
      required SdpType kind,
      required String sdp,
      dynamic hint});

  /// Creates a new [`RtcRtpTransceiver`] and adds it to the set of transceivers
  /// of the specified [`PeerConnection`].
  Future<RtcRtpTransceiver> addTransceiver(
      {required int peerId,
      required MediaType mediaType,
      required RtpTransceiverDirection direction,
      dynamic hint});

  /// Returns a sequence of [`RtcRtpTransceiver`] objects representing the RTP
  /// transceivers currently attached to the specified [`PeerConnection`].
  Future<List<RtcRtpTransceiver>> getTransceivers(
      {required int peerId, dynamic hint});

  /// Changes the preferred `direction` of the specified [`RtcRtpTransceiver`].
  Future<void> setTransceiverDirection(
      {required int peerId,
      required int transceiverIndex,
      required RtpTransceiverDirection direction,
      dynamic hint});

  /// Returns the [negotiated media ID (mid)][1] of the specified
  /// [`RtcRtpTransceiver`].
  ///
  /// [1]: https://w3.org/TR/webrtc#dfn-media-stream-identification-tag
  Future<String?> getTransceiverMid(
      {required int peerId, required int transceiverIndex, dynamic hint});

  /// Returns the preferred direction of the specified [`RtcRtpTransceiver`].
  Future<RtpTransceiverDirection> getTransceiverDirection(
      {required int peerId, required int transceiverIndex, dynamic hint});

  /// Irreversibly marks the specified [`RtcRtpTransceiver`] as stopping, unless
  /// it's already stopped.
  ///
  /// This will immediately cause the transceiver's sender to no longer send, and
  /// its receiver to no longer receive.
  Future<void> stopTransceiver(
      {required int peerId, required int transceiverIndex, dynamic hint});

  /// Replaces the specified [`AudioTrack`] (or [`VideoTrack`]) on the
  /// [`sys::Transceiver`]'s `sender`.
  Future<void> senderReplaceTrack(
      {required int peerId,
      required int transceiverIndex,
      String? trackId,
      dynamic hint});

  /// Adds the new ICE `candidate` to the given [`PeerConnection`].
  Future<void> addIceCandidate(
      {required int peerId,
      required String candidate,
      required String sdpMid,
      required int sdpMlineIndex,
      dynamic hint});

  /// Tells the [`PeerConnection`] that ICE should be restarted.
  Future<void> restartIce({required int peerId, dynamic hint});

  /// Closes the [`PeerConnection`].
  Future<void> disposePeerConnection({required int peerId, dynamic hint});

  /// Creates a [`MediaStream`] with tracks according to provided
  /// [`MediaStreamConstraints`].
  Future<GetMediaResult> getMedia(
      {required MediaStreamConstraints constraints, dynamic hint});

  /// Sets the specified `audio playout` device.
  Future<void> setAudioPlayoutDevice({required String deviceId, dynamic hint});

  /// Indicates whether the microphone is available to set volume.
  Future<bool> microphoneVolumeIsAvailable({dynamic hint});

  /// Sets the microphone system volume according to the specified `level` in
  /// percents.
  ///
  /// Valid values range is `[0; 100]`.
  Future<void> setMicrophoneVolume({required int level, dynamic hint});

  /// Returns the current level of the microphone volume in `[0; 100]` range.
  Future<int> microphoneVolume({dynamic hint});

  /// Disposes the specified [`MediaStreamTrack`].
  Future<void> disposeTrack(
      {required String trackId, required MediaType kind, dynamic hint});

  /// Changes the [enabled][1] property of the [`MediaStreamTrack`] by its ID and
  /// [`MediaType`].
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#track-enabled
  Future<void> setTrackEnabled(
      {required String trackId,
      required MediaType kind,
      required bool enabled,
      dynamic hint});

  /// Clones the specified [`MediaStreamTrack`].
  Future<MediaStreamTrack> cloneTrack(
      {required String trackId, required MediaType kind, dynamic hint});

  /// Registers an observer to the [`MediaStreamTrack`] events.
  Stream<TrackEvent> registerTrackObserver(
      {required String trackId, required MediaType kind, dynamic hint});

  /// Sets the provided [`OnDeviceChangeCallback`] as the callback to be called
  /// whenever a set of available media devices changes.
  ///
  /// Only one callback can be set at a time, so the previous one will be dropped,
  /// if any.
  Stream<void> setOnDeviceChanged({dynamic hint});

  /// Creates a new [`VideoSink`] attached to the specified video track.
  ///
  /// `callback_ptr` argument should be a pointer to an [`UniquePtr`] pointing to
  /// an [`OnFrameCallbackInterface`].
  Future<void> createVideoSink(
      {required int sinkId,
      required String trackId,
      required int callbackPtr,
      dynamic hint});

  /// Destroys the [`VideoSink`] by the provided ID.
  Uint8List disposeVideoSink({required int sinkId, dynamic hint});
}

/// Nature and settings of the audio [`MediaStreamTrack`] returned by
/// [`Webrtc::get_users_media()`].
class AudioConstraints {
  /// Identifier of the device generating the content of the
  /// [`MediaStreamTrack`].
  ///
  /// First device will be chosen if an empty [`String`] is provided.
  ///
  /// __NOTE__: There can be only one active recording device at a time, so
  ///           changing device will affect all previously obtained audio
  ///           tracks.
  final String? deviceId;

  AudioConstraints({
    this.deviceId,
  });
}

/// [RTCBundlePolicy][1] representation.
///
/// Affects which media tracks are negotiated if the remote endpoint is not
/// bundle-aware, and what ICE candidates are gathered. If the remote endpoint
/// is bundle-aware, all media tracks and data channels are bundled onto the
/// same transport.
///
/// [1]: https://w3.org/TR/webrtc#dom-rtcbundlepolicy
enum BundlePolicy {
  /// [RTCBundlePolicy.balanced][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcbundlepolicy-balanced
  Balanced,

  /// [RTCBundlePolicy.max-bundle][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcbundlepolicy-max-bundle
  MaxBundle,

  /// [RTCBundlePolicy.max-compat][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcbundlepolicy-max-compat
  MaxCompat,
}

@freezed
class GetMediaError with _$GetMediaError {
  /// The [`GetMediaError`] is caused while creating [`crate::VideoSource`]
  /// or [`crate::VideoTrack`].
  const factory GetMediaError.audio(
    String field0,
  ) = Audio;

  /// The [`GetMediaError`] is caused while creating
  /// [`crate::sys::AudioSourceInterface`] or [`crate::AudioTrack`].
  const factory GetMediaError.video(
    String field0,
  ) = Video;
}

@freezed
class GetMediaResult with _$GetMediaResult {
  /// Getting the media is ok.
  const factory GetMediaResult.ok(
    List<MediaStreamTrack> field0,
  ) = Ok;

  /// Getting the media is failed.
  const factory GetMediaResult.err(
    GetMediaError field0,
  ) = Err;
}

/// [RTCIceConnectionState][1] representation.
///
/// [1]: https://w3.org/TR/webrtc#dom-rtciceconnectionstate
enum IceConnectionState {
  /// [RTCIceConnectionState.new][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtciceconnectionstate-new
  New,

  /// [RTCIceConnectionState.checking][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtciceconnectionstate-checking
  Checking,

  /// [RTCIceConnectionState.connected][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtciceconnectionstate-connected
  Connected,

  /// [RTCIceConnectionState.completed][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtciceconnectionstate-completed
  Completed,

  /// [RTCIceConnectionState.failed][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtciceconnectionstate-failed
  Failed,

  /// [RTCIceConnectionState.disconnected][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtciceconnectionstate-disconnected
  Disconnected,

  /// [RTCIceConnectionState.closed][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtciceconnectionstate-closed
  Closed,
}

/// [RTCIceGatheringState][1] representation.
///
/// [1]: https://w3.org/TR/webrtc#dom-rtcicegatheringstate
enum IceGatheringState {
  /// [RTCIceGatheringState.new][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcicegatheringstate-new
  New,

  /// [RTCIceGatheringState.gathering][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcicegatheringstate-gathering
  Gathering,

  /// [RTCIceGatheringState.complete][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcicegatheringstate-complete
  Complete,
}

/// [RTCIceTransportPolicy][1] representation.
///
/// It defines an ICE candidate policy the [ICE Agent][2] uses to surface
/// the permitted candidates to the application. Only these candidates will
/// be used for connectivity checks.
///
/// [1]: https://w3.org/TR/webrtc#dom-rtcicetransportpolicy
/// [2]: https://w3.org/TR/webrtc#dfn-ice-agent
enum IceTransportsType {
  /// [RTCIceTransportPolicy.all][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcicetransportpolicy-all
  All,

  /// [RTCIceTransportPolicy.relay][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcicetransportpolicy-relay
  Relay,

  /// ICE Agent can't use `typ host` candidates when this value is specified.
  ///
  /// Non-spec-compliant variant.
  NoHost,

  /// No ICE candidate offered.
  None,
}

/// Information describing a single media input or output device.
class MediaDeviceInfo {
  /// Unique identifier for the represented device.
  final String deviceId;

  /// Kind of the represented device.
  final MediaDeviceKind kind;

  /// Label describing the represented device.
  final String label;

  MediaDeviceInfo({
    required this.deviceId,
    required this.kind,
    required this.label,
  });
}

/// Possible kinds of media devices.
enum MediaDeviceKind {
  /// Audio input device (for example, a microphone).
  AudioInput,

  /// Audio output device (for example, a pair of headphones).
  AudioOutput,

  /// Video input device (for example, a webcam).
  VideoInput,
}

/// [MediaStreamConstraints], used to instruct what sort of
/// [`MediaStreamTrack`]s to include in the [`MediaStream`] returned by
/// [`Webrtc::get_users_media()`].
///
/// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamconstraints
class MediaStreamConstraints {
  /// Specifies the nature and settings of the audio [`MediaStreamTrack`].
  final AudioConstraints? audio;

  /// Specifies the nature and settings of the video [`MediaStreamTrack`].
  final VideoConstraints? video;

  MediaStreamConstraints({
    this.audio,
    this.video,
  });
}

/// Representation of a single media track within a [`MediaStream`].
///
/// Typically, these are audio or video tracks, but other track types may exist
/// as well.
class MediaStreamTrack {
  /// Unique identifier (GUID) of this [`MediaStreamTrack`].
  final String id;

  /// Label identifying the track source, as in "internal microphone".
  final String deviceId;

  /// [`MediaType`] of this [`MediaStreamTrack`].
  final MediaType kind;

  /// Indicator whether this [`MediaStreamTrack`] is allowed to render the
  /// source stream.
  ///
  /// This can be used to intentionally mute a track.
  final bool enabled;

  MediaStreamTrack({
    required this.id,
    required this.deviceId,
    required this.kind,
    required this.enabled,
  });
}

/// Possible media types of a [`MediaStreamTrack`].
enum MediaType {
  /// Audio [`MediaStreamTrack`].
  Audio,

  /// Video [`MediaStreamTrack`].
  Video,
}

@freezed
class PeerConnectionEvent with _$PeerConnectionEvent {
  /// [`PeerConnection`] has been created.
  const factory PeerConnectionEvent.peerCreated({
    /// ID of the created [`PeerConnection`].
    required int id,
  }) = PeerCreated;

  /// [RTCIceCandidate][1] has been discovered.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcicecandidate
  const factory PeerConnectionEvent.iceCandidate({
    /// Media stream "identification-tag" defined in [RFC 5888] for the
    /// media component the discovered [RTCIceCandidate][1] is associated
    /// with.
    ///
    /// [1]: https://w3.org/TR/webrtc#dom-rtcicecandidate
    /// [RFC 5888]: https://tools.ietf.org/html/rfc5888
    required String sdpMid,

    /// Index (starting at zero) of the media description in the SDP this
    /// [RTCIceCandidate][1] is associated with.
    ///
    /// [1]: https://w3.org/TR/webrtc#dom-rtcicecandidate
    required int sdpMlineIndex,

    /// Candidate-attribute as defined in Section 15.1 of [RFC 5245].
    ///
    /// If this [RTCIceCandidate][1] represents an end-of-candidates
    /// indication or a peer reflexive remote candidate, candidate is an
    /// empty string.
    ///
    /// [1]: https://w3.org/TR/webrtc#dom-rtcicecandidate
    /// [RFC 5245]: https://tools.ietf.org/html/rfc5245
    required String candidate,
  }) = IceCandidate;

  /// [`PeerConnection`]'s ICE gathering state has changed.
  const factory PeerConnectionEvent.iceGatheringStateChange(
    IceGatheringState field0,
  ) = IceGatheringStateChange;

  /// Failure occurred when gathering [RTCIceCandidate][1].
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcicecandidate
  const factory PeerConnectionEvent.iceCandidateError({
    /// Local IP address used to communicate with the STUN or TURN server.
    required String address,

    /// Port used to communicate with the STUN or TURN server.
    required int port,

    /// STUN or TURN URL identifying the STUN or TURN server for which the
    /// failure occurred.
    required String url,

    /// Numeric STUN error code returned by the STUN or TURN server
    /// [`STUN-PARAMETERS`][1].
    ///
    /// If no host candidate can reach the server, it will be set to the
    /// value `701` which is outside the STUN error code range.
    ///
    /// [1]: https://tinyurl.com/stun-parameters-6
    required int errorCode,

    /// STUN reason text returned by the STUN or TURN server
    /// [`STUN-PARAMETERS`][1].
    ///
    /// If the server could not be reached, it will be set to an
    /// implementation-specific value providing details about the error.
    ///
    /// [1]: https://tinyurl.com/stun-parameters-6
    required String errorText,
  }) = IceCandidateError;

  /// Negotiation or renegotiation of the [`PeerConnection`] needs to be
  /// performed.
  const factory PeerConnectionEvent.negotiationNeeded() = NegotiationNeeded;

  /// [`PeerConnection`]'s [`SignalingState`] has been changed.
  const factory PeerConnectionEvent.signallingChange(
    SignalingState field0,
  ) = SignallingChange;

  /// [`PeerConnection`]'s [`IceConnectionState`] has been changed.
  const factory PeerConnectionEvent.iceConnectionStateChange(
    IceConnectionState field0,
  ) = IceConnectionStateChange;

  /// [`PeerConnection`]'s [`PeerConnectionState`] has been changed.
  const factory PeerConnectionEvent.connectionStateChange(
    PeerConnectionState field0,
  ) = ConnectionStateChange;

  /// New incoming media has been negotiated.
  const factory PeerConnectionEvent.track(
    RtcTrackEvent field0,
  ) = Track;
}

/// Indicator of the current state of a [`PeerConnection`].
enum PeerConnectionState {
  /// At least one of the connection's ICE transports is in the new state,
  /// and none of them are in one of the following states: `connecting`,
  /// `checking`, `failed`, `disconnected`, or all of the connection's
  /// transports are in the `closed` state.
  New,

  /// One or more of the ICE transports are currently in the process of
  /// establishing a connection. That is, their [`IceConnectionState`] is
  /// either [`IceConnectionState::Checking`] or
  /// [`IceConnectionState::Connected`], and no transports are in the
  /// `failed` state.
  Connecting,

  /// Every ICE transport used by the connection is either in use (state
  /// `connected` or `completed`) or is closed (state `closed`). In addition,
  /// at least one transport is either `connected` or `completed`.
  Connected,

  /// At least one of the ICE transports for the connection is in the
  /// `disconnected` state and none of the other transports are in the state
  /// `failed`, `connecting` or `checking`.
  Disconnected,

  /// One or more of the ICE transports on the connection is in the `failed`
  /// state.
  Failed,

  /// Peer connection is closed.
  Closed,
}

/// [`PeerConnection`]'s configuration.
class RtcConfiguration {
  /// [iceTransportPolicy][1] configuration.
  ///
  /// Indicates which candidates the [ICE Agent][2] is allowed to use.
  ///
  /// [1]: https://tinyurl.com/icetransportpolicy
  /// [2]: https://w3.org/TR/webrtc#dfn-ice-agent
  final IceTransportsType iceTransportPolicy;

  /// [bundlePolicy][1] configuration.
  ///
  /// Indicates which media-bundling policy to use when gathering ICE
  /// candidates.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcconfiguration-bundlepolicy
  final BundlePolicy bundlePolicy;

  /// [iceServers][1] configuration.
  ///
  /// An array of objects describing servers available to be used by ICE,
  /// such as STUN and TURN servers.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcconfiguration-iceservers
  final List<RtcIceServer> iceServers;

  RtcConfiguration({
    required this.iceTransportPolicy,
    required this.bundlePolicy,
    required this.iceServers,
  });
}

/// Description of STUN and TURN servers that can be used by an [ICE Agent][1]
/// to establish a connection with a peer.
///
/// [1]: https://w3.org/TR/webrtc#dfn-ice-agent
class RtcIceServer {
  /// STUN or TURN URI(s).
  final List<String> urls;

  /// If this [`RtcIceServer`] object represents a TURN server, then this
  /// attribute specifies the [username][1] to use with that TURN server.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtciceserver-username
  final String username;

  /// If this [`RtcIceServer`] object represents a TURN server, then this
  /// attribute specifies the [credential][1] to use with that TURN
  /// server.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtciceserver-credential
  final String credential;

  RtcIceServer({
    required this.urls,
    required this.username,
    required this.credential,
  });
}

/// Representation of a permanent pair of an [RTCRtpSender] and an
/// [RTCRtpReceiver], along with some shared state.
///
/// [RTCRtpSender]: https://w3.org/TR/webrtc#dom-rtcrtpsender
/// [RTCRtpReceiver]: https://w3.org/TR/webrtc#dom-rtcrtpreceiver
class RtcRtpTransceiver {
  /// ID of the [`PeerConnection`] that this [`RtcRtpTransceiver`] belongs to.
  final int peerId;

  /// ID of this [`RtcRtpTransceiver`].
  ///
  /// It's not unique across all possible [`RtcRtpTransceiver`]s, but only
  /// within a specific peer.
  final int index;

  /// [Negotiated media ID (mid)][1] which the local and remote peers have
  /// agreed upon to uniquely identify the [`MediaStream`]'s pairing of
  /// sender and receiver.
  ///
  /// [1]: https://w3.org/TR/webrtc#dfn-media-stream-identification-tag
  final String? mid;

  /// Preferred [`direction`][1] of this [`RtcRtpTransceiver`].
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcrtptransceiver-direction
  final RtpTransceiverDirection direction;

  RtcRtpTransceiver({
    required this.peerId,
    required this.index,
    this.mid,
    required this.direction,
  });
}

/// [RTCSessionDescription] representation.
///
/// [RTCSessionDescription]: https://w3.org/TR/webrtc#dom-rtcsessiondescription
class RtcSessionDescription {
  /// String representation of the SDP.
  final String sdp;

  /// Type of this [`RtcSessionDescription`].
  final SdpType kind;

  RtcSessionDescription({
    required this.sdp,
    required this.kind,
  });
}

/// Representation of a track event, sent when a new [`MediaStreamTrack`] is
/// added to an [`RtcRtpTransceiver`] as part of a [`PeerConnection`].
class RtcTrackEvent {
  /// [`MediaStreamTrack`] associated with the [RTCRtpReceiver] identified
  /// by the receiver.
  ///
  /// [RTCRtpReceiver]: https://w3.org/TR/webrtc#dom-rtcrtpreceiver
  final MediaStreamTrack track;

  /// [`RtcRtpTransceiver`] object associated with the event.
  final RtcRtpTransceiver transceiver;

  RtcTrackEvent({
    required this.track,
    required this.transceiver,
  });
}

/// [RTCRtpTransceiverDirection][1] representation.
///
/// [1]: https://w3.org/TR/webrtc#dom-rtcrtptransceiverdirection
enum RtpTransceiverDirection {
  /// The [`RTCRtpTransceiver`]'s [RTCRtpSender] will offer to send RTP, and
  /// will send RTP if the remote peer accepts. The [`RTCRtpTransceiver`]'s
  /// [RTCRtpReceiver] will offer to receive RTP, and will receive RTP if the
  /// remote peer accepts.
  ///
  /// [RTCRtpSender]: https://w3.org/TR/webrtc#dom-rtcrtpsender
  /// [RTCRtpReceiver]: https://w3.org/TR/webrtc#dom-rtcrtpreceiver
  SendRecv,

  /// The [`RTCRtpTransceiver`]'s [RTCRtpSender] will offer to send RTP, and
  /// will send RTP if the remote peer accepts. The [`RTCRtpTransceiver`]'s
  /// [RTCRtpReceiver] will not offer to receive RTP, and will not receive
  /// RTP.
  ///
  /// [RTCRtpSender]: https://w3.org/TR/webrtc#dom-rtcrtpsender
  /// [RTCRtpReceiver]: https://w3.org/TR/webrtc#dom-rtcrtpreceiver
  SendOnly,

  /// The [`RTCRtpTransceiver`]'s [RTCRtpSender] will not offer to send RTP,
  /// and will not send RTP. The [`RTCRtpTransceiver`]'s [RTCRtpReceiver] will
  /// offer to receive RTP, and will receive RTP if the remote peer accepts.
  ///
  /// [RTCRtpSender]: https://w3.org/TR/webrtc#dom-rtcrtpsender
  /// [RTCRtpReceiver]: https://w3.org/TR/webrtc#dom-rtcrtpreceiver
  RecvOnly,

  /// The [`RTCRtpTransceiver`]'s [RTCRtpSender] will not offer to send RTP,
  /// and will not send RTP. The [`RTCRtpTransceiver`]'s [RTCRtpReceiver] will
  /// not offer to receive RTP, and will not receive RTP.
  ///
  /// [RTCRtpSender]: https://w3.org/TR/webrtc#dom-rtcrtpsender
  /// [RTCRtpReceiver]: https://w3.org/TR/webrtc#dom-rtcrtpreceiver
  Inactive,

  /// The [`RTCRtpTransceiver`] will neither send nor receive RTP. It will
  /// generate a zero port in the offer. In answers, its [RTCRtpSender] will
  /// not offer to send RTP, and its [RTCRtpReceiver] will not offer to
  /// receive RTP. This is a terminal state.
  ///
  /// [RTCRtpSender]: https://w3.org/TR/webrtc#dom-rtcrtpsender
  /// [RTCRtpReceiver]: https://w3.org/TR/webrtc#dom-rtcrtpreceiver
  Stopped,
}

/// [RTCSdpType] representation.
///
/// [RTCSdpType]: https://w3.org/TR/webrtc#dom-rtcsdptype
enum SdpType {
  /// [RTCSdpType.offer][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcsdptype-offer
  Offer,

  /// [RTCSdpType.pranswer][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcsdptype-pranswer
  PrAnswer,

  /// [RTCSdpType.answer][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcsdptype-answer
  Answer,

  /// [RTCSdpType.rollback][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcsdptype-rollback
  Rollback,
}

/// [RTCSignalingState] representation.
///
/// [RTCSignalingState]: https://w3.org/TR/webrtc#state-definitions
enum SignalingState {
  /// [RTCSignalingState.stable][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcsignalingstate-stable
  Stable,

  /// [RTCSignalingState.have-local-offer][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcsignalingstate-have-local-offer
  HaveLocalOffer,

  /// [RTCSignalingState.have-local-pranswer][1] representation.
  ///
  /// [1]: https://tinyurl.com/have-local-pranswer
  HaveLocalPrAnswer,

  /// [RTCSignalingState.have-remote-offer][1] representation.
  ///
  /// [1]: https://tinyurl.com/have-remote-offer
  HaveRemoteOffer,

  /// [RTCSignalingState.have-remote-pranswer][1] representation.
  ///
  /// [1]: https://tinyurl.com/have-remote-pranswer
  HaveRemotePrAnswer,

  /// [RTCSignalingState.closed][1] representation.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcsignalingstate-closed
  Closed,
}

/// Indicator of the current state of a [`MediaStreamTrack`].
enum TrackEvent {
  /// Ended event of the [`MediaStreamTrack`] interface is fired when playback
  /// or streaming has stopped because the end of the media was reached or
  /// because no further data is available.
  Ended,
}

/// Nature and settings of the video [`MediaStreamTrack`] returned by
/// [`Webrtc::get_users_media()`].
class VideoConstraints {
  /// Identifier of the device generating the content of the
  /// [`MediaStreamTrack`].
  ///
  /// First device will be chosen if an empty [`String`] is provided.
  final String? deviceId;

  /// Width in pixels.
  final int width;

  /// Height in pixels.
  final int height;

  /// Exact frame rate (frames per second).
  final int frameRate;

  /// Indicator whether the request video track should be acquired via screen
  /// capturing.
  final bool isDisplay;

  VideoConstraints({
    this.deviceId,
    required this.width,
    required this.height,
    required this.frameRate,
    required this.isDisplay,
  });
}

class FlutterWebrtcNativeImpl
    extends FlutterRustBridgeBase<FlutterWebrtcNativeWire>
    implements FlutterWebrtcNative {
  factory FlutterWebrtcNativeImpl(ffi.DynamicLibrary dylib) =>
      FlutterWebrtcNativeImpl.raw(FlutterWebrtcNativeWire(dylib));

  FlutterWebrtcNativeImpl.raw(FlutterWebrtcNativeWire inner) : super(inner);

  Future<List<MediaDeviceInfo>> enumerateDevices({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_enumerate_devices(port_),
        parseSuccessData: _wire2api_list_media_device_info,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "enumerate_devices",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Stream<PeerConnectionEvent> createPeerConnection(
          {required RtcConfiguration configuration, dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_peer_connection(
            port_, _api2wire_box_autoadd_rtc_configuration(configuration)),
        parseSuccessData: _wire2api_peer_connection_event,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "create_peer_connection",
          argNames: ["configuration"],
        ),
        argValues: [configuration],
        hint: hint,
      ));

  Future<RtcSessionDescription> createOffer(
          {required int peerId,
          required bool voiceActivityDetection,
          required bool iceRestart,
          required bool useRtpMux,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_offer(
            port_,
            _api2wire_u64(peerId),
            voiceActivityDetection,
            iceRestart,
            useRtpMux),
        parseSuccessData: _wire2api_rtc_session_description,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "create_offer",
          argNames: [
            "peerId",
            "voiceActivityDetection",
            "iceRestart",
            "useRtpMux"
          ],
        ),
        argValues: [peerId, voiceActivityDetection, iceRestart, useRtpMux],
        hint: hint,
      ));

  Future<RtcSessionDescription> createAnswer(
          {required int peerId,
          required bool voiceActivityDetection,
          required bool iceRestart,
          required bool useRtpMux,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_answer(
            port_,
            _api2wire_u64(peerId),
            voiceActivityDetection,
            iceRestart,
            useRtpMux),
        parseSuccessData: _wire2api_rtc_session_description,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "create_answer",
          argNames: [
            "peerId",
            "voiceActivityDetection",
            "iceRestart",
            "useRtpMux"
          ],
        ),
        argValues: [peerId, voiceActivityDetection, iceRestart, useRtpMux],
        hint: hint,
      ));

  Future<void> setLocalDescription(
          {required int peerId,
          required SdpType kind,
          required String sdp,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_set_local_description(
            port_,
            _api2wire_u64(peerId),
            _api2wire_sdp_type(kind),
            _api2wire_String(sdp)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_local_description",
          argNames: ["peerId", "kind", "sdp"],
        ),
        argValues: [peerId, kind, sdp],
        hint: hint,
      ));

  Future<void> setRemoteDescription(
          {required int peerId,
          required SdpType kind,
          required String sdp,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_set_remote_description(
            port_,
            _api2wire_u64(peerId),
            _api2wire_sdp_type(kind),
            _api2wire_String(sdp)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_remote_description",
          argNames: ["peerId", "kind", "sdp"],
        ),
        argValues: [peerId, kind, sdp],
        hint: hint,
      ));

  Future<RtcRtpTransceiver> addTransceiver(
          {required int peerId,
          required MediaType mediaType,
          required RtpTransceiverDirection direction,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_add_transceiver(
            port_,
            _api2wire_u64(peerId),
            _api2wire_media_type(mediaType),
            _api2wire_rtp_transceiver_direction(direction)),
        parseSuccessData: _wire2api_rtc_rtp_transceiver,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "add_transceiver",
          argNames: ["peerId", "mediaType", "direction"],
        ),
        argValues: [peerId, mediaType, direction],
        hint: hint,
      ));

  Future<List<RtcRtpTransceiver>> getTransceivers(
          {required int peerId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_get_transceivers(port_, _api2wire_u64(peerId)),
        parseSuccessData: _wire2api_list_rtc_rtp_transceiver,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_transceivers",
          argNames: ["peerId"],
        ),
        argValues: [peerId],
        hint: hint,
      ));

  Future<void> setTransceiverDirection(
          {required int peerId,
          required int transceiverIndex,
          required RtpTransceiverDirection direction,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_set_transceiver_direction(
            port_,
            _api2wire_u64(peerId),
            _api2wire_u32(transceiverIndex),
            _api2wire_rtp_transceiver_direction(direction)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_transceiver_direction",
          argNames: ["peerId", "transceiverIndex", "direction"],
        ),
        argValues: [peerId, transceiverIndex, direction],
        hint: hint,
      ));

  Future<String?> getTransceiverMid(
          {required int peerId, required int transceiverIndex, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_transceiver_mid(
            port_, _api2wire_u64(peerId), _api2wire_u32(transceiverIndex)),
        parseSuccessData: _wire2api_opt_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_transceiver_mid",
          argNames: ["peerId", "transceiverIndex"],
        ),
        argValues: [peerId, transceiverIndex],
        hint: hint,
      ));

  Future<RtpTransceiverDirection> getTransceiverDirection(
          {required int peerId, required int transceiverIndex, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_transceiver_direction(
            port_, _api2wire_u64(peerId), _api2wire_u32(transceiverIndex)),
        parseSuccessData: _wire2api_rtp_transceiver_direction,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_transceiver_direction",
          argNames: ["peerId", "transceiverIndex"],
        ),
        argValues: [peerId, transceiverIndex],
        hint: hint,
      ));

  Future<void> stopTransceiver(
          {required int peerId, required int transceiverIndex, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_stop_transceiver(
            port_, _api2wire_u64(peerId), _api2wire_u32(transceiverIndex)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "stop_transceiver",
          argNames: ["peerId", "transceiverIndex"],
        ),
        argValues: [peerId, transceiverIndex],
        hint: hint,
      ));

  Future<void> senderReplaceTrack(
          {required int peerId,
          required int transceiverIndex,
          String? trackId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_sender_replace_track(
            port_,
            _api2wire_u64(peerId),
            _api2wire_u32(transceiverIndex),
            _api2wire_opt_String(trackId)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "sender_replace_track",
          argNames: ["peerId", "transceiverIndex", "trackId"],
        ),
        argValues: [peerId, transceiverIndex, trackId],
        hint: hint,
      ));

  Future<void> addIceCandidate(
          {required int peerId,
          required String candidate,
          required String sdpMid,
          required int sdpMlineIndex,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_add_ice_candidate(
            port_,
            _api2wire_u64(peerId),
            _api2wire_String(candidate),
            _api2wire_String(sdpMid),
            _api2wire_i32(sdpMlineIndex)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "add_ice_candidate",
          argNames: ["peerId", "candidate", "sdpMid", "sdpMlineIndex"],
        ),
        argValues: [peerId, candidate, sdpMid, sdpMlineIndex],
        hint: hint,
      ));

  Future<void> restartIce({required int peerId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_restart_ice(port_, _api2wire_u64(peerId)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "restart_ice",
          argNames: ["peerId"],
        ),
        argValues: [peerId],
        hint: hint,
      ));

  Future<void> disposePeerConnection({required int peerId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_dispose_peer_connection(port_, _api2wire_u64(peerId)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "dispose_peer_connection",
          argNames: ["peerId"],
        ),
        argValues: [peerId],
        hint: hint,
      ));

  Future<GetMediaResult> getMedia(
          {required MediaStreamConstraints constraints, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_media(
            port_, _api2wire_box_autoadd_media_stream_constraints(constraints)),
        parseSuccessData: _wire2api_get_media_result,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_media",
          argNames: ["constraints"],
        ),
        argValues: [constraints],
        hint: hint,
      ));

  Future<void> setAudioPlayoutDevice(
          {required String deviceId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_set_audio_playout_device(
            port_, _api2wire_String(deviceId)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_audio_playout_device",
          argNames: ["deviceId"],
        ),
        argValues: [deviceId],
        hint: hint,
      ));

  Future<bool> microphoneVolumeIsAvailable({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_microphone_volume_is_available(port_),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "microphone_volume_is_available",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<void> setMicrophoneVolume({required int level, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_set_microphone_volume(port_, _api2wire_u8(level)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_microphone_volume",
          argNames: ["level"],
        ),
        argValues: [level],
        hint: hint,
      ));

  Future<int> microphoneVolume({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_microphone_volume(port_),
        parseSuccessData: _wire2api_u32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "microphone_volume",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<void> disposeTrack(
          {required String trackId, required MediaType kind, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_dispose_track(
            port_, _api2wire_String(trackId), _api2wire_media_type(kind)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "dispose_track",
          argNames: ["trackId", "kind"],
        ),
        argValues: [trackId, kind],
        hint: hint,
      ));

  Future<void> setTrackEnabled(
          {required String trackId,
          required MediaType kind,
          required bool enabled,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_set_track_enabled(port_,
            _api2wire_String(trackId), _api2wire_media_type(kind), enabled),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_track_enabled",
          argNames: ["trackId", "kind", "enabled"],
        ),
        argValues: [trackId, kind, enabled],
        hint: hint,
      ));

  Future<MediaStreamTrack> cloneTrack(
          {required String trackId, required MediaType kind, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_clone_track(
            port_, _api2wire_String(trackId), _api2wire_media_type(kind)),
        parseSuccessData: _wire2api_media_stream_track,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "clone_track",
          argNames: ["trackId", "kind"],
        ),
        argValues: [trackId, kind],
        hint: hint,
      ));

  Stream<TrackEvent> registerTrackObserver(
          {required String trackId, required MediaType kind, dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_register_track_observer(
            port_, _api2wire_String(trackId), _api2wire_media_type(kind)),
        parseSuccessData: _wire2api_track_event,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "register_track_observer",
          argNames: ["trackId", "kind"],
        ),
        argValues: [trackId, kind],
        hint: hint,
      ));

  Stream<void> setOnDeviceChanged({dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_set_on_device_changed(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_on_device_changed",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<void> createVideoSink(
          {required int sinkId,
          required String trackId,
          required int callbackPtr,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_video_sink(
            port_,
            _api2wire_i64(sinkId),
            _api2wire_String(trackId),
            _api2wire_u64(callbackPtr)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "create_video_sink",
          argNames: ["sinkId", "trackId", "callbackPtr"],
        ),
        argValues: [sinkId, trackId, callbackPtr],
        hint: hint,
      ));

  Uint8List disposeVideoSink({required int sinkId, dynamic hint}) =>
      executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => inner.wire_dispose_video_sink(_api2wire_i64(sinkId)),
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "dispose_video_sink",
          argNames: ["sinkId"],
        ),
        argValues: [sinkId],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_StringList> _api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = _api2wire_String(raw[i]);
    }
    return ans;
  }

  int _api2wire_bool(bool raw) {
    return raw ? 1 : 0;
  }

  ffi.Pointer<wire_AudioConstraints> _api2wire_box_autoadd_audio_constraints(
      AudioConstraints raw) {
    final ptr = inner.new_box_autoadd_audio_constraints();
    _api_fill_to_wire_audio_constraints(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_MediaStreamConstraints>
      _api2wire_box_autoadd_media_stream_constraints(
          MediaStreamConstraints raw) {
    final ptr = inner.new_box_autoadd_media_stream_constraints();
    _api_fill_to_wire_media_stream_constraints(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_RtcConfiguration> _api2wire_box_autoadd_rtc_configuration(
      RtcConfiguration raw) {
    final ptr = inner.new_box_autoadd_rtc_configuration();
    _api_fill_to_wire_rtc_configuration(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_VideoConstraints> _api2wire_box_autoadd_video_constraints(
      VideoConstraints raw) {
    final ptr = inner.new_box_autoadd_video_constraints();
    _api_fill_to_wire_video_constraints(raw, ptr.ref);
    return ptr;
  }

  int _api2wire_bundle_policy(BundlePolicy raw) {
    return raw.index;
  }

  int _api2wire_i32(int raw) {
    return raw;
  }

  int _api2wire_i64(int raw) {
    return raw;
  }

  int _api2wire_ice_transports_type(IceTransportsType raw) {
    return raw.index;
  }

  ffi.Pointer<wire_list_rtc_ice_server> _api2wire_list_rtc_ice_server(
      List<RtcIceServer> raw) {
    final ans = inner.new_list_rtc_ice_server(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_rtc_ice_server(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  int _api2wire_media_type(MediaType raw) {
    return raw.index;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : _api2wire_String(raw);
  }

  ffi.Pointer<wire_AudioConstraints>
      _api2wire_opt_box_autoadd_audio_constraints(AudioConstraints? raw) {
    return raw == null
        ? ffi.nullptr
        : _api2wire_box_autoadd_audio_constraints(raw);
  }

  ffi.Pointer<wire_VideoConstraints>
      _api2wire_opt_box_autoadd_video_constraints(VideoConstraints? raw) {
    return raw == null
        ? ffi.nullptr
        : _api2wire_box_autoadd_video_constraints(raw);
  }

  int _api2wire_rtp_transceiver_direction(RtpTransceiverDirection raw) {
    return raw.index;
  }

  int _api2wire_sdp_type(SdpType raw) {
    return raw.index;
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u64(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_audio_constraints(
      AudioConstraints apiObj, wire_AudioConstraints wireObj) {
    wireObj.device_id = _api2wire_opt_String(apiObj.deviceId);
  }

  void _api_fill_to_wire_box_autoadd_audio_constraints(
      AudioConstraints apiObj, ffi.Pointer<wire_AudioConstraints> wireObj) {
    _api_fill_to_wire_audio_constraints(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_media_stream_constraints(
      MediaStreamConstraints apiObj,
      ffi.Pointer<wire_MediaStreamConstraints> wireObj) {
    _api_fill_to_wire_media_stream_constraints(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_rtc_configuration(
      RtcConfiguration apiObj, ffi.Pointer<wire_RtcConfiguration> wireObj) {
    _api_fill_to_wire_rtc_configuration(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_video_constraints(
      VideoConstraints apiObj, ffi.Pointer<wire_VideoConstraints> wireObj) {
    _api_fill_to_wire_video_constraints(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_media_stream_constraints(
      MediaStreamConstraints apiObj, wire_MediaStreamConstraints wireObj) {
    wireObj.audio = _api2wire_opt_box_autoadd_audio_constraints(apiObj.audio);
    wireObj.video = _api2wire_opt_box_autoadd_video_constraints(apiObj.video);
  }

  void _api_fill_to_wire_opt_box_autoadd_audio_constraints(
      AudioConstraints? apiObj, ffi.Pointer<wire_AudioConstraints> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_audio_constraints(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_video_constraints(
      VideoConstraints? apiObj, ffi.Pointer<wire_VideoConstraints> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_video_constraints(apiObj, wireObj);
  }

  void _api_fill_to_wire_rtc_configuration(
      RtcConfiguration apiObj, wire_RtcConfiguration wireObj) {
    wireObj.ice_transport_policy =
        _api2wire_ice_transports_type(apiObj.iceTransportPolicy);
    wireObj.bundle_policy = _api2wire_bundle_policy(apiObj.bundlePolicy);
    wireObj.ice_servers = _api2wire_list_rtc_ice_server(apiObj.iceServers);
  }

  void _api_fill_to_wire_rtc_ice_server(
      RtcIceServer apiObj, wire_RtcIceServer wireObj) {
    wireObj.urls = _api2wire_StringList(apiObj.urls);
    wireObj.username = _api2wire_String(apiObj.username);
    wireObj.credential = _api2wire_String(apiObj.credential);
  }

  void _api_fill_to_wire_video_constraints(
      VideoConstraints apiObj, wire_VideoConstraints wireObj) {
    wireObj.device_id = _api2wire_opt_String(apiObj.deviceId);
    wireObj.width = _api2wire_u32(apiObj.width);
    wireObj.height = _api2wire_u32(apiObj.height);
    wireObj.frame_rate = _api2wire_u32(apiObj.frameRate);
    wireObj.is_display = _api2wire_bool(apiObj.isDisplay);
  }
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

Uint8List _wire2api_SyncReturnVecU8(dynamic raw) {
  return raw as Uint8List;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

GetMediaError _wire2api_box_autoadd_get_media_error(dynamic raw) {
  return _wire2api_get_media_error(raw);
}

RtcTrackEvent _wire2api_box_autoadd_rtc_track_event(dynamic raw) {
  return _wire2api_rtc_track_event(raw);
}

GetMediaError _wire2api_get_media_error(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return Audio(
        _wire2api_String(raw[1]),
      );
    case 1:
      return Video(
        _wire2api_String(raw[1]),
      );
    default:
      throw Exception("unreachable");
  }
}

GetMediaResult _wire2api_get_media_result(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return Ok(
        _wire2api_list_media_stream_track(raw[1]),
      );
    case 1:
      return Err(
        _wire2api_box_autoadd_get_media_error(raw[1]),
      );
    default:
      throw Exception("unreachable");
  }
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

IceConnectionState _wire2api_ice_connection_state(dynamic raw) {
  return IceConnectionState.values[raw];
}

IceGatheringState _wire2api_ice_gathering_state(dynamic raw) {
  return IceGatheringState.values[raw];
}

List<MediaDeviceInfo> _wire2api_list_media_device_info(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_media_device_info).toList();
}

List<MediaStreamTrack> _wire2api_list_media_stream_track(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_media_stream_track).toList();
}

List<RtcRtpTransceiver> _wire2api_list_rtc_rtp_transceiver(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_rtc_rtp_transceiver).toList();
}

MediaDeviceInfo _wire2api_media_device_info(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return MediaDeviceInfo(
    deviceId: _wire2api_String(arr[0]),
    kind: _wire2api_media_device_kind(arr[1]),
    label: _wire2api_String(arr[2]),
  );
}

MediaDeviceKind _wire2api_media_device_kind(dynamic raw) {
  return MediaDeviceKind.values[raw];
}

MediaStreamTrack _wire2api_media_stream_track(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return MediaStreamTrack(
    id: _wire2api_String(arr[0]),
    deviceId: _wire2api_String(arr[1]),
    kind: _wire2api_media_type(arr[2]),
    enabled: _wire2api_bool(arr[3]),
  );
}

MediaType _wire2api_media_type(dynamic raw) {
  return MediaType.values[raw];
}

String? _wire2api_opt_String(dynamic raw) {
  return raw == null ? null : _wire2api_String(raw);
}

PeerConnectionEvent _wire2api_peer_connection_event(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return PeerCreated(
        id: _wire2api_u64(raw[1]),
      );
    case 1:
      return IceCandidate(
        sdpMid: _wire2api_String(raw[1]),
        sdpMlineIndex: _wire2api_i32(raw[2]),
        candidate: _wire2api_String(raw[3]),
      );
    case 2:
      return IceGatheringStateChange(
        _wire2api_ice_gathering_state(raw[1]),
      );
    case 3:
      return IceCandidateError(
        address: _wire2api_String(raw[1]),
        port: _wire2api_i32(raw[2]),
        url: _wire2api_String(raw[3]),
        errorCode: _wire2api_i32(raw[4]),
        errorText: _wire2api_String(raw[5]),
      );
    case 4:
      return NegotiationNeeded();
    case 5:
      return SignallingChange(
        _wire2api_signaling_state(raw[1]),
      );
    case 6:
      return IceConnectionStateChange(
        _wire2api_ice_connection_state(raw[1]),
      );
    case 7:
      return ConnectionStateChange(
        _wire2api_peer_connection_state(raw[1]),
      );
    case 8:
      return Track(
        _wire2api_box_autoadd_rtc_track_event(raw[1]),
      );
    default:
      throw Exception("unreachable");
  }
}

PeerConnectionState _wire2api_peer_connection_state(dynamic raw) {
  return PeerConnectionState.values[raw];
}

RtcRtpTransceiver _wire2api_rtc_rtp_transceiver(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return RtcRtpTransceiver(
    peerId: _wire2api_u64(arr[0]),
    index: _wire2api_u64(arr[1]),
    mid: _wire2api_opt_String(arr[2]),
    direction: _wire2api_rtp_transceiver_direction(arr[3]),
  );
}

RtcSessionDescription _wire2api_rtc_session_description(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return RtcSessionDescription(
    sdp: _wire2api_String(arr[0]),
    kind: _wire2api_sdp_type(arr[1]),
  );
}

RtcTrackEvent _wire2api_rtc_track_event(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return RtcTrackEvent(
    track: _wire2api_media_stream_track(arr[0]),
    transceiver: _wire2api_rtc_rtp_transceiver(arr[1]),
  );
}

RtpTransceiverDirection _wire2api_rtp_transceiver_direction(dynamic raw) {
  return RtpTransceiverDirection.values[raw];
}

SdpType _wire2api_sdp_type(dynamic raw) {
  return SdpType.values[raw];
}

SignalingState _wire2api_signaling_state(dynamic raw) {
  return SignalingState.values[raw];
}

TrackEvent _wire2api_track_event(dynamic raw) {
  return TrackEvent.values[raw];
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u64(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlutterWebrtcNativeWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterWebrtcNativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterWebrtcNativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_enumerate_devices(
    int port_,
  ) {
    return _wire_enumerate_devices(
      port_,
    );
  }

  late final _wire_enumerate_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_enumerate_devices');
  late final _wire_enumerate_devices =
      _wire_enumerate_devicesPtr.asFunction<void Function(int)>();

  void wire_create_peer_connection(
    int port_,
    ffi.Pointer<wire_RtcConfiguration> configuration,
  ) {
    return _wire_create_peer_connection(
      port_,
      configuration,
    );
  }

  late final _wire_create_peer_connectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_RtcConfiguration>)>>(
      'wire_create_peer_connection');
  late final _wire_create_peer_connection = _wire_create_peer_connectionPtr
      .asFunction<void Function(int, ffi.Pointer<wire_RtcConfiguration>)>();

  void wire_create_offer(
    int port_,
    int peer_id,
    bool voice_activity_detection,
    bool ice_restart,
    bool use_rtp_mux,
  ) {
    return _wire_create_offer(
      port_,
      peer_id,
      voice_activity_detection ? 1 : 0,
      ice_restart ? 1 : 0,
      use_rtp_mux ? 1 : 0,
    );
  }

  late final _wire_create_offerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Uint8, ffi.Uint8,
              ffi.Uint8)>>('wire_create_offer');
  late final _wire_create_offer = _wire_create_offerPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void wire_create_answer(
    int port_,
    int peer_id,
    bool voice_activity_detection,
    bool ice_restart,
    bool use_rtp_mux,
  ) {
    return _wire_create_answer(
      port_,
      peer_id,
      voice_activity_detection ? 1 : 0,
      ice_restart ? 1 : 0,
      use_rtp_mux ? 1 : 0,
    );
  }

  late final _wire_create_answerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Uint8, ffi.Uint8,
              ffi.Uint8)>>('wire_create_answer');
  late final _wire_create_answer = _wire_create_answerPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void wire_set_local_description(
    int port_,
    int peer_id,
    int kind,
    ffi.Pointer<wire_uint_8_list> sdp,
  ) {
    return _wire_set_local_description(
      port_,
      peer_id,
      kind,
      sdp,
    );
  }

  late final _wire_set_local_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_local_description');
  late final _wire_set_local_description =
      _wire_set_local_descriptionPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_remote_description(
    int port_,
    int peer_id,
    int kind,
    ffi.Pointer<wire_uint_8_list> sdp,
  ) {
    return _wire_set_remote_description(
      port_,
      peer_id,
      kind,
      sdp,
    );
  }

  late final _wire_set_remote_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_remote_description');
  late final _wire_set_remote_description =
      _wire_set_remote_descriptionPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_transceiver(
    int port_,
    int peer_id,
    int media_type,
    int direction,
  ) {
    return _wire_add_transceiver(
      port_,
      peer_id,
      media_type,
      direction,
    );
  }

  late final _wire_add_transceiverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Int32,
              ffi.Int32)>>('wire_add_transceiver');
  late final _wire_add_transceiver =
      _wire_add_transceiverPtr.asFunction<void Function(int, int, int, int)>();

  void wire_get_transceivers(
    int port_,
    int peer_id,
  ) {
    return _wire_get_transceivers(
      port_,
      peer_id,
    );
  }

  late final _wire_get_transceiversPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>(
          'wire_get_transceivers');
  late final _wire_get_transceivers =
      _wire_get_transceiversPtr.asFunction<void Function(int, int)>();

  void wire_set_transceiver_direction(
    int port_,
    int peer_id,
    int transceiver_index,
    int direction,
  ) {
    return _wire_set_transceiver_direction(
      port_,
      peer_id,
      transceiver_index,
      direction,
    );
  }

  late final _wire_set_transceiver_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Uint32,
              ffi.Int32)>>('wire_set_transceiver_direction');
  late final _wire_set_transceiver_direction =
      _wire_set_transceiver_directionPtr
          .asFunction<void Function(int, int, int, int)>();

  void wire_get_transceiver_mid(
    int port_,
    int peer_id,
    int transceiver_index,
  ) {
    return _wire_get_transceiver_mid(
      port_,
      peer_id,
      transceiver_index,
    );
  }

  late final _wire_get_transceiver_midPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint64, ffi.Uint32)>>('wire_get_transceiver_mid');
  late final _wire_get_transceiver_mid =
      _wire_get_transceiver_midPtr.asFunction<void Function(int, int, int)>();

  void wire_get_transceiver_direction(
    int port_,
    int peer_id,
    int transceiver_index,
  ) {
    return _wire_get_transceiver_direction(
      port_,
      peer_id,
      transceiver_index,
    );
  }

  late final _wire_get_transceiver_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64,
              ffi.Uint32)>>('wire_get_transceiver_direction');
  late final _wire_get_transceiver_direction =
      _wire_get_transceiver_directionPtr
          .asFunction<void Function(int, int, int)>();

  void wire_stop_transceiver(
    int port_,
    int peer_id,
    int transceiver_index,
  ) {
    return _wire_stop_transceiver(
      port_,
      peer_id,
      transceiver_index,
    );
  }

  late final _wire_stop_transceiverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint64, ffi.Uint32)>>('wire_stop_transceiver');
  late final _wire_stop_transceiver =
      _wire_stop_transceiverPtr.asFunction<void Function(int, int, int)>();

  void wire_sender_replace_track(
    int port_,
    int peer_id,
    int transceiver_index,
    ffi.Pointer<wire_uint_8_list> track_id,
  ) {
    return _wire_sender_replace_track(
      port_,
      peer_id,
      transceiver_index,
      track_id,
    );
  }

  late final _wire_sender_replace_trackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_sender_replace_track');
  late final _wire_sender_replace_track =
      _wire_sender_replace_trackPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_ice_candidate(
    int port_,
    int peer_id,
    ffi.Pointer<wire_uint_8_list> candidate,
    ffi.Pointer<wire_uint_8_list> sdp_mid,
    int sdp_mline_index,
  ) {
    return _wire_add_ice_candidate(
      port_,
      peer_id,
      candidate,
      sdp_mid,
      sdp_mline_index,
    );
  }

  late final _wire_add_ice_candidatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_add_ice_candidate');
  late final _wire_add_ice_candidate = _wire_add_ice_candidatePtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_restart_ice(
    int port_,
    int peer_id,
  ) {
    return _wire_restart_ice(
      port_,
      peer_id,
    );
  }

  late final _wire_restart_icePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>(
          'wire_restart_ice');
  late final _wire_restart_ice =
      _wire_restart_icePtr.asFunction<void Function(int, int)>();

  void wire_dispose_peer_connection(
    int port_,
    int peer_id,
  ) {
    return _wire_dispose_peer_connection(
      port_,
      peer_id,
    );
  }

  late final _wire_dispose_peer_connectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>(
          'wire_dispose_peer_connection');
  late final _wire_dispose_peer_connection =
      _wire_dispose_peer_connectionPtr.asFunction<void Function(int, int)>();

  void wire_get_media(
    int port_,
    ffi.Pointer<wire_MediaStreamConstraints> constraints,
  ) {
    return _wire_get_media(
      port_,
      constraints,
    );
  }

  late final _wire_get_mediaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_MediaStreamConstraints>)>>('wire_get_media');
  late final _wire_get_media = _wire_get_mediaPtr.asFunction<
      void Function(int, ffi.Pointer<wire_MediaStreamConstraints>)>();

  void wire_set_audio_playout_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_set_audio_playout_device(
      port_,
      device_id,
    );
  }

  late final _wire_set_audio_playout_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_audio_playout_device');
  late final _wire_set_audio_playout_device = _wire_set_audio_playout_devicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_microphone_volume_is_available(
    int port_,
  ) {
    return _wire_microphone_volume_is_available(
      port_,
    );
  }

  late final _wire_microphone_volume_is_availablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_microphone_volume_is_available');
  late final _wire_microphone_volume_is_available =
      _wire_microphone_volume_is_availablePtr.asFunction<void Function(int)>();

  void wire_set_microphone_volume(
    int port_,
    int level,
  ) {
    return _wire_set_microphone_volume(
      port_,
      level,
    );
  }

  late final _wire_set_microphone_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint8)>>(
          'wire_set_microphone_volume');
  late final _wire_set_microphone_volume =
      _wire_set_microphone_volumePtr.asFunction<void Function(int, int)>();

  void wire_microphone_volume(
    int port_,
  ) {
    return _wire_microphone_volume(
      port_,
    );
  }

  late final _wire_microphone_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_microphone_volume');
  late final _wire_microphone_volume =
      _wire_microphone_volumePtr.asFunction<void Function(int)>();

  void wire_dispose_track(
    int port_,
    ffi.Pointer<wire_uint_8_list> track_id,
    int kind,
  ) {
    return _wire_dispose_track(
      port_,
      track_id,
      kind,
    );
  }

  late final _wire_dispose_trackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_dispose_track');
  late final _wire_dispose_track = _wire_dispose_trackPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_set_track_enabled(
    int port_,
    ffi.Pointer<wire_uint_8_list> track_id,
    int kind,
    bool enabled,
  ) {
    return _wire_set_track_enabled(
      port_,
      track_id,
      kind,
      enabled ? 1 : 0,
    );
  }

  late final _wire_set_track_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32,
              ffi.Uint8)>>('wire_set_track_enabled');
  late final _wire_set_track_enabled = _wire_set_track_enabledPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_clone_track(
    int port_,
    ffi.Pointer<wire_uint_8_list> track_id,
    int kind,
  ) {
    return _wire_clone_track(
      port_,
      track_id,
      kind,
    );
  }

  late final _wire_clone_trackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_clone_track');
  late final _wire_clone_track = _wire_clone_trackPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_register_track_observer(
    int port_,
    ffi.Pointer<wire_uint_8_list> track_id,
    int kind,
  ) {
    return _wire_register_track_observer(
      port_,
      track_id,
      kind,
    );
  }

  late final _wire_register_track_observerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_register_track_observer');
  late final _wire_register_track_observer = _wire_register_track_observerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_set_on_device_changed(
    int port_,
  ) {
    return _wire_set_on_device_changed(
      port_,
    );
  }

  late final _wire_set_on_device_changedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_set_on_device_changed');
  late final _wire_set_on_device_changed =
      _wire_set_on_device_changedPtr.asFunction<void Function(int)>();

  void wire_create_video_sink(
    int port_,
    int sink_id,
    ffi.Pointer<wire_uint_8_list> track_id,
    int callback_ptr,
  ) {
    return _wire_create_video_sink(
      port_,
      sink_id,
      track_id,
      callback_ptr,
    );
  }

  late final _wire_create_video_sinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64)>>('wire_create_video_sink');
  late final _wire_create_video_sink = _wire_create_video_sinkPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>, int)>();

  WireSyncReturnStruct wire_dispose_video_sink(
    int sink_id,
  ) {
    return _wire_dispose_video_sink(
      sink_id,
    );
  }

  late final _wire_dispose_video_sinkPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(ffi.Int64)>>(
          'wire_dispose_video_sink');
  late final _wire_dispose_video_sink = _wire_dispose_video_sinkPtr
      .asFunction<WireSyncReturnStruct Function(int)>();

  ffi.Pointer<wire_StringList> new_StringList(
    int len,
  ) {
    return _new_StringList(
      len,
    );
  }

  late final _new_StringListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList');
  late final _new_StringList = _new_StringListPtr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_AudioConstraints> new_box_autoadd_audio_constraints() {
    return _new_box_autoadd_audio_constraints();
  }

  late final _new_box_autoadd_audio_constraintsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_AudioConstraints> Function()>>(
      'new_box_autoadd_audio_constraints');
  late final _new_box_autoadd_audio_constraints =
      _new_box_autoadd_audio_constraintsPtr
          .asFunction<ffi.Pointer<wire_AudioConstraints> Function()>();

  ffi.Pointer<wire_MediaStreamConstraints>
      new_box_autoadd_media_stream_constraints() {
    return _new_box_autoadd_media_stream_constraints();
  }

  late final _new_box_autoadd_media_stream_constraintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_MediaStreamConstraints>
              Function()>>('new_box_autoadd_media_stream_constraints');
  late final _new_box_autoadd_media_stream_constraints =
      _new_box_autoadd_media_stream_constraintsPtr
          .asFunction<ffi.Pointer<wire_MediaStreamConstraints> Function()>();

  ffi.Pointer<wire_RtcConfiguration> new_box_autoadd_rtc_configuration() {
    return _new_box_autoadd_rtc_configuration();
  }

  late final _new_box_autoadd_rtc_configurationPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_RtcConfiguration> Function()>>(
      'new_box_autoadd_rtc_configuration');
  late final _new_box_autoadd_rtc_configuration =
      _new_box_autoadd_rtc_configurationPtr
          .asFunction<ffi.Pointer<wire_RtcConfiguration> Function()>();

  ffi.Pointer<wire_VideoConstraints> new_box_autoadd_video_constraints() {
    return _new_box_autoadd_video_constraints();
  }

  late final _new_box_autoadd_video_constraintsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_VideoConstraints> Function()>>(
      'new_box_autoadd_video_constraints');
  late final _new_box_autoadd_video_constraints =
      _new_box_autoadd_video_constraintsPtr
          .asFunction<ffi.Pointer<wire_VideoConstraints> Function()>();

  ffi.Pointer<wire_list_rtc_ice_server> new_list_rtc_ice_server(
    int len,
  ) {
    return _new_list_rtc_ice_server(
      len,
    );
  }

  late final _new_list_rtc_ice_serverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_rtc_ice_server> Function(
              ffi.Int32)>>('new_list_rtc_ice_server');
  late final _new_list_rtc_ice_server = _new_list_rtc_ice_serverPtr
      .asFunction<ffi.Pointer<wire_list_rtc_ice_server> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RtcIceServer extends ffi.Struct {
  external ffi.Pointer<wire_StringList> urls;

  external ffi.Pointer<wire_uint_8_list> username;

  external ffi.Pointer<wire_uint_8_list> credential;
}

class wire_list_rtc_ice_server extends ffi.Struct {
  external ffi.Pointer<wire_RtcIceServer> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RtcConfiguration extends ffi.Struct {
  @ffi.Int32()
  external int ice_transport_policy;

  @ffi.Int32()
  external int bundle_policy;

  external ffi.Pointer<wire_list_rtc_ice_server> ice_servers;
}

class wire_AudioConstraints extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;
}

class wire_VideoConstraints extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint32()
  external int frame_rate;

  @ffi.Uint8()
  external int is_display;
}

class wire_MediaStreamConstraints extends ffi.Struct {
  external ffi.Pointer<wire_AudioConstraints> audio;

  external ffi.Pointer<wire_VideoConstraints> video;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
